#!/usr/bin/env ruby

# Yes, I'm making you bundle install to get active support...
require 'active_support'
require 'active_support/core_ext/object/blank'

def replace!(template,actual)
  puts "\nreplacing #{template} with #{actual}"
  Dir.glob("**/*", File::FNM_DOTMATCH) do |file_name|
    next if File.directory?(file_name)
    next if file_name[0..3] == '.git'
    next if file_name == 'bin/setup'
    text = File.read(file_name)
    text.gsub! /#{template}/, actual
    File.open(file_name, "w") {|file| file.puts text }
  end
end

print "What is the name of the gem (e.g., certify_activity_log)?\n> "
gem_name = ActiveSupport::Inflector.underscore gets.chomp
gem_class = ActiveSupport::Inflector.camelize gem_name
gem_kabob = ActiveSupport::Inflector.dasherize gem_name

obj_name = gem_name.gsub /certify_/, ''
obj_class = gem_class.gsub /Certify/, ''
obj_kabob = gem_kabob.gsub /certify-/, ''
obj_title = ActiveSupport::Inflector.titleize obj_name

puts "name:  #{gem_name}"
puts "class: #{gem_class}"
puts "kabob: #{gem_kabob}"

puts "obj name:  #{obj_name}"
puts "obj class: #{obj_class}"
puts "obj kabob: #{obj_kabob}"
puts "obj title: #{obj_title}"

print "What is the summary of the gem (one-liner)?\n> "
gem_summary = gets.chomp

print "What port does the api run on?\n> "
gem_port = gets.chomp.to_i.to_s

puts "\nRename files and directories"
`mv certify_gem_template.gemspec #{gem_name}.gemspec`
`mv lib/certify_gem_template.rb lib/#{gem_name}.rb`
`mv lib/certify_gem_template/resources/gem_template.rb lib/certify_gem_template/resources/#{obj_name}.rb`
`mv lib/certify_gem_template lib/#{gem_name}`
`mv README.template README.md`

puts "\nReplace all the things in all the files"
replace! 'certify_gem_template', gem_name
replace! 'certify-gem-template', gem_kabob
replace! 'CertifyGemTemplate', gem_class
replace! 'gem_template', obj_name
replace! 'gem-template', obj_kabob
replace! 'GemTemplate', obj_class
replace! 'Gem Template', obj_title
replace! 'GEM_SUMMARY', gem_summary
replace! 'GEM_PORT', gem_port
`grep -v activesupport #{gem_name}.gemspec > tmp.gemspec ; mv tmp.gemspec #{gem_name}.gemspec`
`grep -v Gemfile.lock .gitignore > .gitignore.tmp ; mv .gitignore.tmp .gitignore`

print "\nInitialize git (Yes/No)?\n> "
if gets[0..2].downcase == 'yes'
  print "Commit message (default: 'initial commit'):\n> "
  commit_message = gets.chomp
  commit_message = 'initial commit' if commit_message.blank?
  `rm -rf .git`
  `git init`
  `git add .`
  `git commit -m commit_message`
end

puts <<-EOF

Congratulations! You now have the beginning of a fabulous new gem.  Next steps:

  1. 'cd .' to initialize your gemset
  2. 'bundle install' to load your dependencies
  3. flesh out the API calls in lib/#{gem_name}/resources/#{obj_name}.rb
EOF
